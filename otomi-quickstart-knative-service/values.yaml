## @param fullnameOverride String to fully override ksvc.fullname template
## Used by Otomi to set the name for all resources based on the workload name
##
fullnameOverride: ""

## @param image.repository your image repository
## @param image.tag image tag (immutable tags are recommended)
## @param image.pullPolicy image pull policy
##
image:
  repository: ""
  pullPolicy: IfNotPresent
  tag: ""

## @param env Environment variables for containers
##
env: []
  # - name: TARGET
  #   value: VALUE

## @param annotations Annotations for pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
##
podAnnotations: {}

## @param labels Additional labels for pods
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
podLabels: {}

## @param labels Additional labels for all resources
## ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
##
commonLabels: {}

## @param autoscaling Set autoscaling annotations for the Knative service
## Will set the following annotations:
## autoscaling.knative.dev/min-scale: "minReplicas"
## autoscaling.knative.dev/max-scale: "maxReplicas"
##
autoscaling:
  minReplicas: 0
  maxReplicas: 10

## Pods Service Account
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
## A service account with the name of the workload will always be created.
##
serviceAccount:
  ## @param serviceAccount.annotations Annotations for service account.
  ##
  annotations: {}
  ## Optionally specify an array of imagePullSecrets. Only use when deploying images from external registries
  ## When images are deployed from local Harbor registry, pull secrets are already added to the service account
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ## E.g.:
  ## imagePullSecrets:
  ##   - myRegistryKeySecretName
  ##
  imagePullSecrets: []

## Pod liveness probe.
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
livenessProbe: {}
  # httpGet:
  #   path: /
  #   port: http1

## Pod readiness probe.
## ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
##
readinessProbe:
  httpGet:
    path: /
    port: http1
  successThreshold: 5

## Container Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
containerSecurityContext: {}
  # runAsNonRoot: true
  # runAsUser: 1000
  # capabilities:
  #   drop:
  #   - ALL
  # fsGroup: 2000

## Configures the ports the container listens on
##
containerPorts:
  - name: http1
    containerPort: 8080
    protocol: TCP

## Containers' resource requests and limits
## ref: https://kubernetes.io/docs/user-guide/compute-resources/
## You can change default resource request in the workload values. This increases the chance the charts will run on environments with little
## resources, such as Minikube.
## @param resources.limits The resources limits for the container
## @param resources.requests The requested resources for the container
##
resources:
  limits:
     cpu: 500m
     memory: 1Gi
  requests:
     cpu: 200m
     memory: 32Mi

## @param nodeSelector Node labels for pod assignment.
## Ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## @param tolerations Tolerations for pod assignment.
## Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: []

## @param affinity Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## @param secrets Set secrets as container environment variables using a secretRef
##
secrets: []
  # - mysecret

## Command and args for running the container (set to default if not set). Use array form
## @param command Override default container command (useful when using custom images)
## @param args Override default container args (useful when using custom images)
##
command: []
args: []
  # - --metric-name=custom_prometheus
  # - --metric-value=40
  # - --port=8080

## Mount files and secrets to a container.
## @param files Mount files
## @param secretMounts Mount secrets
##
files: []
  # /etc/nginx/nginx.conf: |
  #   this is my nginx config
secretMounts: []
  # /some/secret/conf: conf-secret-name

## @param ingress Configure service exposure. Default is public
## If set to 'cluster', the label 'serving.deployment.dev/visibility: cluster-local' is added
##
ingress: public

## Prometheus Operator ServiceMonitor configuration
##
serviceMonitor:
  ## @param serviceMonitor.create Creates a Prometheus Operator ServiceMonitor
  ## The service monitor is configured to use the private team Prometheus instance
  ##
  create: false
  ## @param serviceMonitor.endPoints Configure the endpoints for the service monitor
  ## The service monitor is configured to use the private team Prometheus instance
  ## See: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#podmetricsendpoint
  endpoints: []
